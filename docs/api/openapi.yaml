openapi: 3.0.3
info:
  title: Sci-Bono Clubhouse LMS API
  version: 1.0.0
  description: |
    Comprehensive RESTful API for the Sci-Bono Clubhouse Learning Management System.
    
    This API provides complete functionality for:
    - User management and authentication
    - Course and lesson management  
    - Holiday program registration
    - Attendance tracking
    - Administrative operations
    
    ## Authentication
    This API uses JWT (JSON Web Tokens) for authentication. Include the token in the Authorization header:
    ```
    Authorization: Bearer <your-jwt-token>
    ```
    
    ## Rate Limiting
    API requests are rate limited based on user type:
    - Regular users: 100 requests/minute
    - Admin users: 1000 requests/minute
    - Guest users: 20 requests/minute
    
    ## Error Handling
    The API returns consistent error responses with appropriate HTTP status codes and detailed error messages.
  
  contact:
    name: Sci-Bono Development Team
    email: dev@sci-bono.co.za
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.sci-bono-lms.com/v1
    description: Production server
  - url: https://staging-api.sci-bono-lms.com/v1
    description: Staging server
  - url: http://localhost/Sci-Bono_Clubhoue_LMS/app/API
    description: Local development server

paths:
  # Authentication endpoints
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and return JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - identifier
                - password
              properties:
                identifier:
                  type: string
                  description: Username or email address
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  description: User password
                  example: "secure123"
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        401:
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        429:
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh JWT token
      description: Refresh an existing JWT token
      security:
        - bearerAuth: []
      responses:
        200:
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        401:
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Invalidate JWT token
      security:
        - bearerAuth: []
      responses:
        200:
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  # User management endpoints
  /users:
    get:
      tags:
        - Users
      summary: Get users list
      description: Retrieve paginated list of users with optional filtering
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of users per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: search
          in: query
          description: Search term for filtering users
          schema:
            type: string
        - name: user_type
          in: query
          description: Filter by user type
          schema:
            type: string
            enum: [admin, mentor, member, student]
        - name: status
          in: query
          description: Filter by user status
          schema:
            type: string
            enum: [active, inactive, suspended, pending]
      responses:
        200:
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUsersResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Users
      summary: Create new user
      description: Create a new user account
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        400:
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieve a specific user by their ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
      responses:
        200:
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Users
      summary: Update user
      description: Update an existing user's information
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        200:
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        400:
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Users
      summary: Delete user
      description: Delete a user account
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
      responses:
        200:
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{id}/profile:
    get:
      tags:
        - Users
      summary: Get user profile
      description: Get detailed user profile information
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
      responses:
        200:
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Users
      summary: Update user profile
      description: Update user profile information
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        200:
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        400:
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'

  /users/{id}/change-password:
    post:
      tags:
        - Users
      summary: Change user password
      description: Change password for a specific user
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - current_password
                - new_password
              properties:
                current_password:
                  type: string
                  format: password
                  description: Current password
                new_password:
                  type: string
                  format: password
                  description: New password (minimum 8 characters)
                  minLength: 8
      responses:
        200:
          description: Password changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        400:
          description: Invalid password data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        401:
          description: Current password incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          description: Unique user identifier
          example: 123
        name:
          type: string
          description: User's first name
          example: "John"
        surname:
          type: string
          description: User's surname
          example: "Doe"
        username:
          type: string
          description: Unique username
          example: "johndoe"
        email:
          type: string
          format: email
          description: User's email address
          example: "john.doe@example.com"
        user_type:
          type: string
          enum: [admin, mentor, member, student]
          description: User role/type
          example: "student"
        status:
          type: string
          enum: [active, inactive, suspended, pending]
          description: User account status
          example: "active"
        email_verified:
          type: boolean
          description: Whether email is verified
          example: true
        created_at:
          type: string
          format: date-time
          description: Account creation timestamp
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2024-01-15T10:30:00Z"

    UserProfile:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            phone:
              type: string
              description: Phone number
              example: "+27123456789"
            date_of_birth:
              type: string
              format: date
              description: Date of birth
              example: "1990-05-15"
            address:
              type: string
              description: Physical address
              example: "123 Main St, Johannesburg"
            bio:
              type: string
              description: User biography
              example: "Passionate learner and educator"
            avatar_url:
              type: string
              format: uri
              description: Profile picture URL
              example: "https://example.com/avatars/user123.jpg"
            preferences:
              type: object
              description: User preferences
              properties:
                notifications:
                  type: boolean
                  example: true
                language:
                  type: string
                  example: "en"

    CreateUserRequest:
      type: object
      required:
        - email
        - password
      properties:
        name:
          type: string
          maxLength: 100
          example: "John"
        surname:
          type: string
          maxLength: 100
          example: "Doe"
        username:
          type: string
          maxLength: 50
          example: "johndoe"
        email:
          type: string
          format: email
          maxLength: 255
          example: "john.doe@example.com"
        password:
          type: string
          format: password
          minLength: 8
          example: "SecurePassword123!"
        user_type:
          type: string
          enum: [admin, mentor, member, student]
          default: student
          example: "student"
        phone:
          type: string
          example: "+27123456789"

    UpdateUserRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
          example: "John"
        surname:
          type: string
          maxLength: 100
          example: "Doe"
        username:
          type: string
          maxLength: 50
          example: "johndoe"
        email:
          type: string
          format: email
          maxLength: 255
          example: "john.doe@example.com"
        user_type:
          type: string
          enum: [admin, mentor, member, student]
          example: "mentor"
        status:
          type: string
          enum: [active, inactive, suspended, pending]
          example: "active"

    UpdateProfileRequest:
      type: object
      properties:
        phone:
          type: string
          example: "+27123456789"
        date_of_birth:
          type: string
          format: date
          example: "1990-05-15"
        address:
          type: string
          example: "123 Main St, Johannesburg"
        bio:
          type: string
          maxLength: 1000
          example: "Passionate learner and educator"
        preferences:
          type: object
          properties:
            notifications:
              type: boolean
            language:
              type: string

    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            token:
              type: string
              description: JWT access token
              example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            refresh_token:
              type: string
              description: JWT refresh token
              example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            expires_at:
              type: string
              format: date-time
              description: Token expiration time
              example: "2024-01-15T14:30:00Z"
            user:
              $ref: '#/components/schemas/User'

    UserResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          $ref: '#/components/schemas/User'

    UserProfileResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          $ref: '#/components/schemas/UserProfile'

    PaginatedUsersResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    PaginationInfo:
      type: object
      properties:
        current_page:
          type: integer
          example: 1
        per_page:
          type: integer
          example: 20
        total:
          type: integer
          example: 150
        pages:
          type: integer
          example: 8
        has_next:
          type: boolean
          example: true
        has_previous:
          type: boolean
          example: false

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operation completed successfully"

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: "Invalid request"
        message:
          type: string
          example: "The requested resource could not be found"
        code:
          type: integer
          example: 404

    ValidationErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: "Validation failed"
        message:
          type: string
          example: "The request data is invalid"
        errors:
          type: object
          description: Field-specific validation errors
          example:
            email: ["Email address is required", "Email format is invalid"]
            password: ["Password must be at least 8 characters"]

  responses:
    UnauthorizedError:
      description: Authentication information is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    ForbiddenError:
      description: Insufficient permissions to perform this action
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFoundError:
      description: The requested resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    ValidationError:
      description: Request validation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationErrorResponse'

    RateLimitError:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      headers:
        X-RateLimit-Limit:
          description: Number of requests allowed per time window
          schema:
            type: integer
        X-RateLimit-Remaining:
          description: Number of requests remaining in current window
          schema:
            type: integer
        X-RateLimit-Reset:
          description: Time when rate limit resets
          schema:
            type: integer

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Users
    description: User management operations
  - name: Courses
    description: Course management operations
  - name: Holiday Programs
    description: Holiday program management
  - name: Attendance
    description: Attendance tracking and management