# Sci-Bono Clubhouse LMS - Docker Compose Configuration
# Phase 7: API Development & Testing - Production Deployment

version: '3.8'

services:
  # Web Application
  app:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: sci-bono-lms-app
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./logs:/var/www/html/logs
      - ./storage:/var/www/html/storage
      - ./public/assets/uploads:/var/www/html/public/assets/uploads
      - ssl-certs:/etc/ssl/certs
      - ssl-private:/etc/ssl/private
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - DB_HOST=database
      - DB_PORT=3306
      - DB_DATABASE=sci_bono_lms
      - DB_USERNAME=sci_bono_user
      - DB_PASSWORD_FILE=/run/secrets/db_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PERFORMANCE_MONITORING_ENABLED=true
      - PERFORMANCE_SAMPLE_RATE=1.0
      - ALERTS_ENABLED=true
      - EMAIL_ALERTS_ENABLED=true
      - SMTP_HOST=smtp.sci-bono.co.za
      - SMTP_PORT=587
      - SMTP_USERNAME_FILE=/run/secrets/smtp_username
      - SMTP_PASSWORD_FILE=/run/secrets/smtp_password
    secrets:
      - db_password
      - smtp_username
      - smtp_password
    depends_on:
      - database
      - redis
    networks:
      - sci-bono-network
    labels:
      - "com.sci-bono.service=app"
      - "com.sci-bono.environment=production"

  # Database
  database:
    image: mysql:8.0
    container_name: sci-bono-lms-db
    restart: unless-stopped
    command: --default-authentication-plugin=mysql_native_password
    ports:
      - "3306:3306"
    volumes:
      - db-data:/var/lib/mysql
      - ./database/init:/docker-entrypoint-initdb.d
      - ./docker/mysql/my.cnf:/etc/mysql/conf.d/custom.cnf
    environment:
      - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/mysql_root_password
      - MYSQL_DATABASE=sci_bono_lms
      - MYSQL_USER=sci_bono_user
      - MYSQL_PASSWORD_FILE=/run/secrets/db_password
      - TZ=Africa/Johannesburg
    secrets:
      - mysql_root_password
      - db_password
    networks:
      - sci-bono-network
    labels:
      - "com.sci-bono.service=database"
      - "com.sci-bono.environment=production"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: sci-bono-lms-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./docker/redis/redis.conf:/etc/redis/redis.conf
    command: redis-server /etc/redis/redis.conf
    networks:
      - sci-bono-network
    labels:
      - "com.sci-bono.service=cache"
      - "com.sci-bono.environment=production"

  # Nginx Reverse Proxy (Optional - for load balancing)
  nginx:
    image: nginx:alpine
    container_name: sci-bono-lms-nginx
    restart: unless-stopped
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ssl-certs:/etc/ssl/certs
      - ssl-private:/etc/ssl/private
    depends_on:
      - app
    networks:
      - sci-bono-network
    labels:
      - "com.sci-bono.service=proxy"
      - "com.sci-bono.environment=production"

  # Monitoring (Prometheus)
  prometheus:
    image: prom/prometheus:latest
    container_name: sci-bono-lms-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - sci-bono-network
    labels:
      - "com.sci-bono.service=monitoring"

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: sci-bono-lms-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_admin_password
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=https://monitoring.sci-bono-lms.com
    secrets:
      - grafana_admin_password
    depends_on:
      - prometheus
    networks:
      - sci-bono-network
    labels:
      - "com.sci-bono.service=dashboard"

  # Log Aggregation (ELK Stack - Optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.0
    container_name: sci-bono-lms-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - sci-bono-network
    profiles:
      - monitoring
    labels:
      - "com.sci-bono.service=logging"

  logstash:
    image: docker.elastic.co/logstash/logstash:8.5.0
    container_name: sci-bono-lms-logstash
    restart: unless-stopped
    volumes:
      - ./docker/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./logs:/var/log/sci-bono-lms
    depends_on:
      - elasticsearch
    networks:
      - sci-bono-network
    profiles:
      - monitoring
    labels:
      - "com.sci-bono.service=log-processing"

  kibana:
    image: docker.elastic.co/kibana/kibana:8.5.0
    container_name: sci-bono-lms-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - sci-bono-network
    profiles:
      - monitoring
    labels:
      - "com.sci-bono.service=log-dashboard"

  # Backup Service
  backup:
    image: alpine:latest
    container_name: sci-bono-lms-backup
    restart: "no"
    volumes:
      - db-data:/backup/database
      - ./storage:/backup/storage
      - ./docker/scripts/backup.sh:/backup.sh
      - backup-storage:/backup/archives
    environment:
      - BACKUP_RETENTION_DAYS=30
      - DB_HOST=database
      - DB_USER=sci_bono_user
      - DB_PASSWORD_FILE=/run/secrets/db_password
      - DB_NAME=sci_bono_lms
    secrets:
      - db_password
    command: ["/backup.sh"]
    depends_on:
      - database
    networks:
      - sci-bono-network
    profiles:
      - backup
    labels:
      - "com.sci-bono.service=backup"

# Networks
networks:
  sci-bono-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  db-data:
    driver: local
    labels:
      - "com.sci-bono.volume=database"
  redis-data:
    driver: local
    labels:
      - "com.sci-bono.volume=cache"
  prometheus-data:
    driver: local
    labels:
      - "com.sci-bono.volume=metrics"
  grafana-data:
    driver: local
    labels:
      - "com.sci-bono.volume=dashboard"
  elasticsearch-data:
    driver: local
    labels:
      - "com.sci-bono.volume=logs"
  ssl-certs:
    driver: local
    labels:
      - "com.sci-bono.volume=ssl-certs"
  ssl-private:
    driver: local
    labels:
      - "com.sci-bono.volume=ssl-private"
  backup-storage:
    driver: local
    labels:
      - "com.sci-bono.volume=backups"

# Secrets
secrets:
  db_password:
    file: ./secrets/db_password.txt
  mysql_root_password:
    file: ./secrets/mysql_root_password.txt
  smtp_username:
    file: ./secrets/smtp_username.txt
  smtp_password:
    file: ./secrets/smtp_password.txt
  grafana_admin_password:
    file: ./secrets/grafana_admin_password.txt